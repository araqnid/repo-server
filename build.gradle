apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = 'org.araqnid.fuellog.boot.Main'

ext {
    jettyVersion = '9.4.3.v20170317'
    jacksonVersion = '2.8.7'
    resteasyVersion = '3.1.2.Final'
    guiceVersion = '4.1.0'
    guavaVersion = '21.0'
}

sourceSets {
    tools {
        java {
            compileClasspath += main.output
        }
    }
}

configurations {
    runtime.exclude module: 'jsr305'
    toolsCompile.extendsFrom compile
    toolsRuntime.extendsFrom runtime
}

allprojects {
    group = "org.araqnid.fuellog"
    if (System.getenv("BUILD_NUMBER")) {
        version = "0.0.${System.getenv("BUILD_NUMBER")}"
    }

    repositories {
        mavenCentral()
        maven {
            url "https://repo.araqnid.org/maven/"
        }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.8"
        options.encoding = "UTF-8"
        options.compilerArgs << "-parameters"
        options.incremental = true
        options.deprecation = true
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.description ?: project.name,
                'Implementation-Version': project.version,
                'X-Service-Class': mainClassName
    }
    from('ui/www') {
        into "www"
    }
}

configurations {
    runtime.exclude group: 'commons-logging', module: 'commons-logging'
    runtime.exclude group: 'log4j', module: 'log4j'
    testRuntime.exclude group: 'ch.qos.logback', module: 'logback-classic'
}

dependencies {
    compile "org.araqnid:app-status:0.0.0"
    compile "org.araqnid:eventstore:0.0.0"
    compile "com.google.guava:guava:$guavaVersion"
    compile "com.google.inject:guice:$guiceVersion"
    compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
    compile "com.google.inject.extensions:guice-multibindings:$guiceVersion"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.eclipse.jetty:jetty-server:$jettyVersion"
    compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jboss.resteasy:resteasy-jaxrs:$resteasyVersion"
    compile "org.jboss.resteasy:resteasy-guice:$resteasyVersion"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-guice:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    compile "com.google.code.findbugs:jsr305:3.0.0"
    compile "org.apache.httpcomponents:httpasyncclient:4.1.3"
    compile "com.fasterxml.uuid:java-uuid-generator:3.1.3"
    compile "org.tukaani:xz:1.5"
    compile "org.apache.commons:commons-compress:1.13"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile project(":test-utils")
    runtime "ch.qos.logback:logback-classic:1.2.2"
    runtime "org.slf4j:jcl-over-slf4j:1.7.25"
}

task runtimeDeps(dependsOn: 'processResources') {
    def sha1 = java.security.MessageDigest.getInstance("SHA-1")
    def metainf = new File("$buildDir/resources/main/META-INF")
    def depsFile = new File(metainf, project.name + ".deps.txt")
    def bootDepsFile = new File(metainf, project.name + ".bootdeps.txt")

    outputs.file depsFile
    outputs.file bootDepsFile
    outputs.upToDateWhen {
        if (!depsFile.exists()) return false
        if (!bootDepsFile.exists()) return false
        def newArtifacts = 0
        def currentContent = depsFile.text
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (currentContent.indexOf(' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n') < 0) newArtifacts++
        }
        return newArtifacts == 0
    }

    doLast {
        metainf.mkdirs()
        depsFile.text = ''
        configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            depsFile.text += sha1.digest(artifact.file.bytes).collect {String.format "%02x", it}.join() + ' ' + artifact.moduleVersion.id + ' ' + artifact.type + '\n'
        }
        bootDepsFile.text = ''
    }
}

jar.dependsOn(runtimeDeps)

check.dependsOn(toolsClasses)

buildscript {
    ext.kotlinVersion = '1.1.1'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

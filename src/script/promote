#!/bin/sh

artifact=repo-server
site=repo
server_host=yenisei.araqnid.org

set -e

cd "$(dirname $0)/../.."

gradle() {
    ./gradlew "$@"
}

tagged_as=$(git describe --tags)
if ! expr "$tagged_as" : 'v[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
    if [ -n "$NO_REBUILD" ]; then
        echo "$0: current version $tagged_as is not a release version" >&2
        exit 1
    fi
    version_patchnr=$( expr "$tagged_as" : 'v[0-9][0-9]*\.[0-9][0-9]*\.\([0-9][0-9]*\)-' )
    if [ -z "$version_patchnr" ]; then
        echo "$0: current version $tagged_as is not a release version and doesn't have an obvious patch scheme" >&2
        exit 1
    fi
    version_majmin=$( expr "$tagged_as" : 'v\([0-9][0-9]*\.[0-9][0-9]*\)\.[0-9][0-9]*' )
    next_patchnr=$(expr $version_patchnr + 1)
    next_version="$version_majmin.$next_patchnr"
    git tag -m "Version $next_version" v$next_version
    tagged_as=v$next_version
fi
version=$(echo $tagged_as | sed -e 's/^v//')

if [ -z "$NO_REBUILD" ]; then
    gradle clean build
    git push origin master
    git push origin $tagged_as
fi

tmpdir=$(mktemp -d -t $artifact-$site-promote)
trap 'rm -rf "$tmpdir"' EXIT

jarfile=$artifact-$version.jar
ln -sfn $PWD/build/libs/$jarfile $tmpdir/$jarfile
ln -sfn $PWD/src/script/mount_service $tmpdir/mount

remote_jadm_command="set -e; tmpdir=\$(mktemp -d -p /srv/$site-japp); tar -C \$tmpdir -x -f -; cd \$tmpdir; ARTIFACT=$artifact SITE=$site VERSION=$version ./mount && echo systemctl restart $site-japp; cd /; rm -rf \$tmpdir"
remote_user_command="sudo -u $site-jadm sh -c '$remote_jadm_command'"

tar --dereference -C $tmpdir -c -f - . | ssh root@$server_host "$remote_user_command"
